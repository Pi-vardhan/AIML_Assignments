# -*- coding: utf-8 -*-
"""DataProcessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/vvrgit/AI/blob/main/DataProcessing.ipynb

#Mount Google Drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""#Import required libraries"""

import numpy as np
import math as mt
import random
import pandas as pd

"""# Load Data"""

housing = pd.read_csv("/content/drive/MyDrive/AI Data/Housing.csv")
housing.head()

"""# Checking for null values"""

print(housing.info())

"""print(housing.describe())

#Binary Conversion
"""

# Converting the categorical variable into numerical
varlist =  ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea']

# Defining the map function
def binary_map(x):
    return x.map({'yes': 1, "no": 0})

# Applying the function to the housing list
housing[varlist] = housing[varlist].apply(binary_map)

# Check the housing dataframe now
housing

"""#Categorical Conversion"""

# Dropping the first column from status dataset
status = pd.get_dummies(housing['furnishingstatus'], drop_first = True)

# Adding the status to the original housing dataframe
housing = pd.concat([housing, status], axis = 1)

# Dropping 'furnishingstatus' as we have created the dummies for it
housing.drop(['furnishingstatus'], axis = 1, inplace = True)

housing

"""#Outliers Detection"""

def detect_outliers_zscore(data):
    outliers = []
    thres = 3
    mean = np.mean(data)
    std = np.std(data)
    #print(mean, std)
    for i in data:
        #print(i)
        z_score = (i-mean)/std
        if (np.abs(z_score) > thres):
            outliers.append(i)
    return outliers# Driver code

sample_outliers_price = detect_outliers_zscore(housing['price'])
sample_outliers_area = detect_outliers_zscore(housing['area'])
sample_outliers_bedrooms = detect_outliers_zscore(housing['bedrooms'])
print("Outliers in price column from Z-scores method: ", sample_outliers_price)
print("Outliers in area column from Z-scores method: ", sample_outliers_area)
print("Outliers in bedrooms column from Z-scores method: ", sample_outliers_bedrooms)

from scipy.stats import zscore
z1 = np.abs(zscore(housing['price']))
z2 = np.abs(zscore(housing['area']))
z3 = np.abs(zscore(housing['bedrooms']))
housing['Zscore_price'] = z1
housing['Zscore_area'] = z2
housing['Zscore_bedrooms'] = z3
outliers_price=len(housing[housing['Zscore_price']>3])
outliers_area=len(housing[housing['Zscore_area']>3])
outliers_bed=len(housing[housing['Zscore_bedrooms']>3])
data_z = housing[housing['Zscore_price']<3]
data_z = housing[housing['Zscore_area']<3]
data_z = housing[housing['Zscore_bedrooms']<3]
housing=data_z.drop(['Zscore_price', 'Zscore_area', 'Zscore_bedrooms'], axis=1)
housing

"""#Missing Values Treatment"""

print(housing.isnull().sum())

m1=housing['price'].mean()
m2=housing['area'].mean()
m3=housing['bedrooms'].mean()
housing['price'].fillna(value=m1, inplace=True)
housing['area'].fillna(value=m2, inplace=True)
housing['bedrooms'].fillna(value=m3, inplace=True)
housing

"""#Data Split"""

from sklearn.model_selection import train_test_split
dataframe = housing.values
X, y = dataframe[:, :-1], dataframe[:, -1]
x_train, x_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 10)
x_train

"""# **Thank You**"""

